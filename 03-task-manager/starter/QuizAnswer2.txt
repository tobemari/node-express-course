1. In this lesson, you created a middleware function called asyncWrapper. Why?

    We need that because we have async operations and try...catch blocks in each controller are redundant to set up
    So the better solution is to create a middleware function that will wrap our controllers and in there we will set up a functionality where we don't have to repeat ourselves.

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    return next(createCustomError(`No task with the id: ${taskID}`, 404))
  }  
  res.status(200).json({ task });  
});  
As you will see in the lessons that follow, you do not have to always create the asyncWrapper middleware, because you can instead use an NPM package called express-async-errors that provides the same capability.